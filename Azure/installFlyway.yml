parameters:
- name: flywayversion
  type: string
  default: '11.0.0'
- name: licenseType
  type: string
  default: Community
  values:
    - LicenseKey
    - LicensePermit
    - Community
- name: sqlfluffversion
  type: string
  default: '3.0.7'

# Make sure one of the following variables is defined when using a licensed copy of Flyway
#
# If using LicenseKey as your license type make sure the variable FLYWAY_LICENSE_KEY is defined
# in the redgate-global-vars variable group
#
# If using LicensePermit as your license type, make sure you upload your permit file as a Secure File
# into your Library and named REDGATE_LICENSING_PERMIT.txt
# For more information about the Redgate Permit File see the following article https://documentation.red-gate.com/fd/license-permits-224919672.html
#


steps:
- task: DownloadSecureFile@1
  name: LicensePermitFile
  condition: ${{ eq(parameters.licenseType, 'LicensePermit')}}
  displayName: 'Download Flyway License Permit'
  inputs:
    secureFile: 'REDGATE_LICENSING_PERMIT.txt'

- task: PowerShell@2
  displayName: 'Download and unzip Flyway command line'
  env:
    FLYWAY_LICENSE_KEY: $(FLYWAY_LICENSE_KEY)
    LICENSING_PERMIT_PATH: $(LicensePermitFile.secureFilePath)
    FLYWAY_VERSION: ${{ parameters.flywayversion }}
    LICENSE_TYPE: ${{ parameters.licenseType }}
  inputs:
    targetType: 'inline'    
    script: |
      # Write your PowerShell commands here.
      $version = $env:FLYWAY_VERSION
      $licenseType = $env:LICENSE_TYPE
      $permitFilePath = $env:LICENSING_PERMIT_PATH
      $extension = $IsWindows ? 'zip' : 'tar.gz' 
      if ($IsWindows) {$platform = 'windows'}`
      elseif ($IsMacOS) {$platform = 'macosx'}`
      elseif ($IsLinux) {$platform = 'linux'}
      Write-Host "Hello Flyway, getting Version $version for $platform"
      $flywayZip = "https://download.red-gate.com/maven/release/org/flywaydb/enterprise/flyway-commandline/$version/flyway-commandline-$version-$platform-x64.$extension" 
      $targetZip = "flyway-commandline-$version-$platform-x64.$extension"
      $flyway = "flyway-$version"
      $flywayPath = Join-Path (Get-Location).ToString() -ChildPath "\Tools\$flyway"
      mkdir ./Tools
      # Remove-Item .\Tools -Force -Recurse -ErrorAction Ignore
      Invoke-WebRequest $flywayZip -OutFile $targetZip
      if ($IsWindows)
      {
        Expand-Archive -LiteralPath $targetZip -DestinationPath ./Tools
      }
      else
      {
        tar -xvf $targetZip -C ./Tools
        chmod +x $flywayPath/flyway
      }
      if ($licenseType -eq 'LicensePermit')
      {
         if (Test-Path -Path $permitFilePath -PathType leaf)
         {
           write-host "Permit File Path: $permitFilePath"
           $permitFile = Split-Path -Path $permitFilePath -Leaf
           Move-Item -Path $permitFilePath -Destination $flywayPath/$permitFile
           write-host "##vso[task.setvariable variable=REDGATE_LICENSING_PERMIT_PATH;]$flywayPath/$permitFile"
         } 
         else
         {
           write-host "File $permitFilePath does not exist"
         }
      }
      else
      {
        write-host "skipping permit license file"
      }      
      write-host "##vso[task.prependpath]$flywayPath"
    pwsh: true
    workingDirectory: '$(Pipeline.Workspace)'

- script: |
    python -m pip install --upgrade pip
    pip install sqlfluff==${{ parameters.sqlfluffversion }}
  displayName: 'Install SQL Fluff'
  failOnStderr: true

- task: PowerShell@2
  displayName: 'Check Flyway Client (Community)'
  condition: ${{ eq(parameters.licenseType, 'Community')}}
  continueOnError: true
  inputs:
   targetType: 'inline'
   script: |  
     $Env:FLYWAY_LICENSE_KEY = ''
     $Env:REDGATE_LICENSING_PERMIT_PATH = ''
     write-host "PATH = $($env:PATH)"
     flyway -v
   pwsh: true
   failOnStderr: false

- task: PowerShell@2
  displayName: 'Check Flyway Client (Licensed)'
  condition: ${{ eq(parameters.licenseType, 'LicenseKey')}}
  continueOnError: true
  env:
    FLYWAY_LICENSE_KEY: $(FLYWAY_LICENSE_KEY)
  inputs:
   targetType: 'inline'
   script: |  
     $Env:REDGATE_LICENSING_PERMIT_PATH = ''
     write-host "PATH = $($env:PATH)"
     write-host "FLYWAY_LICENSE_KEY = $($env:FLYWAY_LICENSE_KEY)"
     flyway -v
   pwsh: true
   failOnStderr: false

- task: PowerShell@2
  displayName: 'Check Flyway Client (Licensed)'
  condition: ${{ eq(parameters.licenseType, 'LicensePermit')}}
  continueOnError: true
  env:
    REDGATE_LICENSING_PERMIT_PATH: $(REDGATE_LICENSING_PERMIT_PATH)
  inputs:
   targetType: 'inline'
   script: |  
     $Env:FLYWAY_LICENSE_KEY = ''
     write-host "PATH = $($env:PATH)"
     write-host "REDGATE_LICENSING_PERMIT_PATH = $($env:REDGATE_LICENSING_PERMIT_PATH)"
     flyway -v
   pwsh: true
   failOnStderr: false
