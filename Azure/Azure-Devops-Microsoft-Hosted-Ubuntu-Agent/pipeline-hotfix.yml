name: docker-ADO-hosted-hotfix-pipeline

# This pipeline is intended to execute as quickly as possible. There are no manual interventions by default,
# no artifacts are generated to review unless pauseForCodeReview is set to true.
# Use only when needed.

trigger: none

pool:
  vmImage: $(AGENT_POOL)

parameters:

  - name: cherryPickVersions
    displayName: 'Scripts To Hotfix: Comma Separated List Of Full Version Numbers'
    default: ''
    type: string
  
  # This is the extensible definition of your target environments. 
  # Every parameter in deploymentStages corresponds to an environment - here it's Test and Prod.
  # Pay attention to the 'dependsOn' field - this determines order of operations.
  - name: deploymentStages
    type: object
    default: 

    - stage: 'Test'
      displayName: 'Hotfix Test'
      pauseForCodeReview: false
      variableGroupName: 'test_credentials_variable_group' #contains userName, password, JDBC, databaseName, check_JDBC
    
    - stage: 'Prod'
      dependsOn: 'Test'
      displayName: 'Hotfix Prod'
      pauseForCodeReview: false
      variableGroupName: 'prod_credentials_variable_group' #contains userName, password, JDBC, databaseName, check_JDBC 
        # IMPORTANT: check_JDBC will get destroyed

variables:

  BUILD_NAME: 'Build'
  RELEASE_PREVIEW: 'Release-Preview.sql'
  
  FLYWAY_MIGRATIONS_PATH: $(Build.Repository.LocalPath)/migrations
  FLYWAY_CONFIG_FILES: $(Build.Repository.LocalPath)
  FLYWAY: 'docker run --rm -v "$(FLYWAY_MIGRATIONS_PATH)":/flyway/migrations -v "$(FLYWAY_CONFIG_FILES)":/flyway/conf $(FLYWAY_DOCKER_IMAGE) flyway -user="$(userName)" -password="$(password)" -licenseKey=$(FLYWAY_LICENSE_KEY)'
  
  # Contains FLYWAY_LICENSE_KEY, BASELINE_VERSION, FIRST_UNDO_SCRIPT, FLYWAY_DOCKER_IMAGE
  # Make BASELINE_VERSION match the baseline version in your project
  # Make FIRST_UNDO_SCRIPT match the first undo version in your project
  # FLYWAY_DOCKER_IMAGE is currently at: redgate/flyway:9.1.5-azure
  # Look for images at https://hub.docker.com/r/redgate/flyway
  group: flyway_vars
  cherryPickVersions: ${{parameters.cherryPickVersions}}

stages:
  
  - ${{each stage in parameters.deploymentStages}}:
    
    - stage: ${{stage.stage}} 
      displayName: ${{stage.displayName}} 
      jobs:
      
      - ${{if eq(stage.pauseForCodeReview, true)}}:
        - job: PreRelease
          displayName: Release Preview
          variables:
          - group: ${{stage.variableGroupName}}
          - group: flyway_vars
          steps:

            - script: '$(FLYWAY) migrate -cherryPick="$(cherryPickVersions)" -outOfOrder=true -dryRunOutput="$(System.ArtifactsDirectory)\${{stage.stage}}-$(RELEASE_PREVIEW)" -url="$(JDBC)" -licenseKey=$(FLYWAY_LICENSE_KEY) -user="$(userName)" -password="$(password)" -baselineOnMigrate=true -baselineVersion=$(BASELINE_VERSION)'
              failOnStderr: false
              displayName: 'Pre-Release Deployment Report'
              env:
                FLYWAY_CLEAN_DISABLED: true

            - task: PublishBuildArtifacts@1
              displayName: 'Publish Release Preview'
              inputs:
                ArtifactName: 'Release Preview'
                PathtoPublish: '$(System.ArtifactsDirectory)\${{stage.stage}}-$(RELEASE_PREVIEW)'
      
        - job: CodeReview
          displayName: Code Review
          dependsOn: 'PreRelease'
          pool: server
          steps:
            - task: ManualValidation@0
              displayName: 'Review Change Report Prior To Release'
              timeoutInMinutes: 4320 # job times out in 3 days
              inputs:
                notifyUsers: |
                  user@email.com
                  example@example.com
                instructions: 'Review changes'

        - job: Deploy
          displayName: Deployment
          dependsOn: 'CodeReview'
          variables:
          - group: ${{stage.variableGroupName}}
          - group: flyway_vars
          steps:

            - script: '$(FLYWAY) info migrate -cherryPick="$(cherryPickVersions)" -outOfOrder=true info -url="$(JDBC)" -licenseKey=$(FLYWAY_LICENSE_KEY) -user="$(userName)" -password="$(password)" -baselineOnMigrate=true -baselineVersion=$(BASELINE_VERSION)'
              displayName: ${{stage.displayName}}
              failOnStderr: false
              env:
                FLYWAY_CLEAN_DISABLED: true # clean destroys a target DB, keep disabled except for build step
      
      - ${{if ne(stage.pauseForCodeReview, true)}}:
        - job: Deploy
          displayName: Deployment
          variables:
          - group: ${{stage.variableGroupName}}
          - group: flyway_vars
          steps:

            - script: '$(FLYWAY) info migrate -cherryPick="$(cherryPickVersions)" -outOfOrder=true info -url="$(JDBC)" -licenseKey=$(FLYWAY_LICENSE_KEY) -user="$(userName)" -password="$(password)" -baselineOnMigrate=true -baselineVersion=$(BASELINE_VERSION)'
              displayName: ${{stage.displayName}}
              failOnStderr: false
              env:
                FLYWAY_CLEAN_DISABLED: true # clean destroys a target DB, keep disabled except for build step