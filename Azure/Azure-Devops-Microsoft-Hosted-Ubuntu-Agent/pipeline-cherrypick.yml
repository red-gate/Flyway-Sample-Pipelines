name: docker-ADO-hosted-cherrypick-pipeline

# This pipeline will go through the build process and generate all artifacts as normal, it just
# requires a manual trigger and inputting a comma-separated list of version scripts.

trigger: none

pool:
  vmImage: $(AGENT_POOL)

parameters:

  - name: cherryPickVersions
    displayName: 'Scripts To CherryPick: Comma Separated List Of Full Version Numbers'
    default: ''
    type: string
  
  # IMPORTANT: DO NOT ADD DEPLOYMENT STEPS TO THE BUILD STAGE - THE BUILD IS A DESTRUCTIVE ACTION
  - name: buildStage
    type: object
    default: 

      stage: 'Build'
      displayName: 'Deploy Build'
      variableGroupName: 'build_credentials_variable_group' #contains userName, password, JDBC, databaseName

  # This is the extensible definition of your target environments. 
  # Every parameter in deploymentStages corresponds to an environment - here it's Test and Prod.
  # Pay attention to the 'dependsOn' field - this determines order of operations.
  - name: deploymentStages
    type: object
    default: 

    - stage: 'Test'
      dependsOn: 'Build'
      displayName: 'Deploy Test'
      pauseForCodeReview: false
      variableGroupName: 'test_credentials_variable_group' #contains userName, password, JDBC, databaseName, check_JDBC
        # IMPORTANT: check_JDBC will get destroyed
    
    - stage: 'Prod'
      dependsOn: 'Test'
      displayName: 'Deploy Prod'
      pauseForCodeReview: true
      variableGroupName: 'prod_credentials_variable_group' #contains userName, password, JDBC, databaseName, check_JDBC 
        # IMPORTANT: check_JDBC will get destroyed

variables:

  BUILD_NAME: 'Build'
  RELEASE_PREVIEW: 'Release-Preview.sql'
  REPORTS: 'Reports.html'
  REPORTS_DISPLAY_NAME: 'Reports'
  
  FLYWAY_MIGRATIONS_PATH: $(Build.Repository.LocalPath)/migrations
  FLYWAY_CONFIG_FILES: $(Build.Repository.LocalPath)
          #  docker run --rm -v "$(FLYWAY_MIGRATIONS_PATH)":/flyway/migrations -v "$(FLYWAY_CONFIG_FILES)":/flyway/conf -v "$(System.ArtifactsDirectory)":/flyway/reports $(FLYWAY_DOCKER_IMAGE) flyway -user="$(userName)" -password="$(password)" -licenseKey=$(FLYWAY_LICENSE_KEY)
  FLYWAY: 'docker run --rm -v "$(FLYWAY_MIGRATIONS_PATH)":/flyway/migrations -v "$(FLYWAY_CONFIG_FILES)":/flyway/conf -v "$(System.ArtifactsDirectory)":/flyway/reports $(FLYWAY_DOCKER_IMAGE) flyway -user="$(userName)" -password="$(password)" -licenseKey=$(FLYWAY_LICENSE_KEY)'
  
  # Contains FLYWAY_LICENSE_KEY, BASELINE_VERSION, FIRST_UNDO_SCRIPT, FLYWAY_DOCKER_IMAGE
  # Make BASELINE_VERSION match the baseline version in your project
  # Make FIRST_UNDO_SCRIPT match the first undo version in your project
  # FLYWAY_DOCKER_IMAGE is currently at: redgate/flyway:9.1.5-azure
  # Look for images at https://hub.docker.com/r/redgate/flyway
  group: flyway_vars
  cherryPickVersions: ${{parameters.cherryPickVersions}}

stages:
  - stage: Build
    displayName: ${{parameters.buildStage.displayName}} 
    jobs:
    - job: Build
      variables:
      - group: ${{parameters.buildStage.variableGroupName}}
      - group: flyway_vars
      steps:
        
        - script: | 
            $(FLYWAY) clean info -url="$(JDBC)" -user="$(userName)" -password="$(password)" -cleanDisabled='false'
          failOnStderr: false
          displayName: 'Clean Build DB'

        - script: |
            $(FLYWAY) migrate info -url="$(JDBC)" -user="$(userName)" -password="$(password)" -cleanDisabled='true'
          failOnStderr: false
          displayName: 'Validate Migrate Scripts'

        - script: |
            $(FLYWAY) undo info -url="$(JDBC)" -user="$(userName)" -password="$(password)" -target="$(FIRST_UNDO_SCRIPT)"? -licenseKey=$(FLYWAY_LICENSE_KEY) -cleanDisabled='true'
          continueOnError: true
          displayName: 'Validate Undo Scripts'
        
        - task: CopyFiles@2
          inputs:
            targetFolder: '$(System.ArtifactsDirectory)' 

        - task: PublishBuildArtifacts@1
          displayName: 'Publish Build Artifact'
          inputs:
            ArtifactName: '$(BUILD_NAME)'
            PathtoPublish: '$(System.ArtifactsDirectory)'

  - ${{each stage in parameters.deploymentStages}}:
    
    - stage: ${{stage.stage}} 
      displayName: ${{stage.displayName}} 
      dependsOn: ${{stage.dependsOn}} 
      jobs:
      - job: PreRelease
        displayName: Release Preview
        variables:
        - group: ${{stage.variableGroupName}}
        - group: flyway_vars
        steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: '$(BUILD_NAME)'
              downloadPath: '$(System.ArtifactsDirectory)'
          
          - script: |
              $(FLYWAY) migrate -cherryPick=$(cherryPickVersions) -outOfOrder=true -dryRunOutput='reports/${{stage.stage}}-$(RELEASE_PREVIEW)' '-url=$(JDBC)' '-cleanDisabled=true' -user="$(userName)" -password="$(password)" -baselineOnMigrate=true -baselineVersion='$(BASELINE_VERSION)'
            failOnStderr: false
            displayName: 'Pre-Release Deployment Report'
            
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Release Preview'
            inputs:
              ArtifactName: 'Release Preview'
              PathtoPublish: '$(System.ArtifactsDirectory)/${{stage.stage}}-$(RELEASE_PREVIEW)'

          - script: |
              $(FLYWAY) check -changes -drift -code "-check.buildUrl=$(check_JDBC)" "-url=$(JDBC)" "-check.reportFilename=reports/$(databaseName)-$(Build.BuildId)-$(REPORTS)" -cleanDisabled='false' -baselineOnMigrate=true -baselineVersion='$(BASELINE_VERSION)'
            continueOnError: true
            displayName: '$(REPORTS_DISPLAY_NAME)'
          
          - task: PublishBuildArtifacts@1
            displayName: 'Publish $(REPORTS_DISPLAY_NAME)'
            continueOnError: true
            inputs:
              ArtifactName: '$(REPORTS_DISPLAY_NAME)'
              PathtoPublish: '$(System.ArtifactsDirectory)/$(databaseName)-$(Build.BuildId)-$(REPORTS)'

      - ${{if eq(stage.pauseForCodeReview, true)}}:
        - job: CodeReview
          displayName: Code Review
          dependsOn: 'PreRelease'
          pool: server
          steps:
            - task: ManualValidation@0
              displayName: 'Review Change Report Prior To Release'
              timeoutInMinutes: 4320 # job times out in 3 days
              inputs:
                notifyUsers: |
                  user@email.com
                  example@example.com
                instructions: 'Review changes'
      
      - ${{if ne(stage.pauseForCodeReview, true)}}:
        - job: CodeReview
          displayName: Skipping Code Review
          dependsOn: 'PreRelease'
      
      - job: Deploy
        displayName: Deployment
        dependsOn: 'CodeReview'
        variables:
        - group: ${{stage.variableGroupName}}
        - group: flyway_vars
        steps:

          - script: |
              $(FLYWAY) info migrate -cherryPick=$(cherryPickVersions) -outOfOrder=true info -url="$(JDBC)" -licenseKey=$(FLYWAY_LICENSE_KEY) -user="$(userName)" -password="$(password)" -baselineOnMigrate=true -baselineVersion=$(BASELINE_VERSION) -cleanDisabled='true'
            workingDirectory: $(System.DefaultWorkingDirectory)
            displayName: ${{stage.displayName}}
            failOnStderr: false