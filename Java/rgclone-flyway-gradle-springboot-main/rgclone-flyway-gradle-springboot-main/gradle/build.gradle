plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.1'
    id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.redgate'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
    maven { url "https://download.red-gate.com/maven/release/" }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'org.flywaydb.enterprise:flyway-core:9.16.2'
    implementation 'org.flywaydb.enterprise:flyway-proprietary:9.16.2'
    implementation 'com.oracle.database.jdbc:ojdbc8'
    implementation 'com.h2database:h2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.register('setupRgCloneCli') {
    doLast {
        // Declaring a couple of parameters, so that we can use GitHub secrets for the rgclone endpoint and token.
        def rgCloneEndpoint = project.property('rgCloneEndpoint')
        def rgCloneToken = project.property('rgCloneToken')

        // Downloading rgClone
        exec {
            commandLine 'curl', '-o', 'rgclone.tar.gz', "$rgCloneEndpoint/cloning-api/download/cli/linux-amd64"
        }

        // Extracting rgClone
        exec {
            commandLine 'tar', 'xz', '-f', 'rgclone.tar.gz'
        }

        // Using rgClone to authenticate against the Redgate Clone server
        exec {
            // I've so far failed to set RGCLONE_API_ENDPOINT globally, but this works within a single exec block
            environment 'RGCLONE_API_ENDPOINT', rgCloneEndpoint

            // I'm sure there's a better way to get the path to rgclone, but this works
            workingDir '.'
            commandLine './rgclone', 'auth', '-t', rgCloneToken
        }
    }
}

tasks.register('startCloneAndFlywayMigrate') {
    dependsOn setupRgCloneCli
    dependsOn build

    doLast {
        // Declaring a couple of parameters, so that we can use GitHub secrets for the rgclone endpoint and token.
        def rgCloneEndpoint = project.property('rgCloneEndpoint')
        def containerName = project.property('containerName')
        def flywayLicenseKey = project.property('flywayLicenseKey')
        def rgCloneDbPassword = project.property('rgCloneDbPassword')

        exec {
            environment 'RGCLONE_API_ENDPOINT', rgCloneEndpoint
            environment 'RGCLONE_CONTAINER_NAME', containerName
            environment 'RGCLONE_DB_PASSWORD', rgCloneDbPassword
            commandLine "java", "-classpath", sourceSets.main.runtimeClasspath.getAsPath(), 'com.redgate.Application', "--spring.flyway.licenseKey=${flywayLicenseKey}"
        }
    }
}

test {
    dependsOn setupRgCloneCli
    useJUnitPlatform()
}
