node {
    def OutputDirectory = "C:/Program Files (x86)/Jenkins/jobs/Oracle DevOps (migrations)"
     
    def CiDatabaseJdbc = "jdbc:oracle:thin:@//localhost:1521/ci"
    def AcceptanceDatabaseJdbc = "jdbc:oracle:thin:@//localhost:1521/acceptance"
    def ProductionDatabaseJdbc = "jdbc:oracle:thin:@//localhost:1521/production"
     
    def Schema = "HR"
    def User = "HR"
    def Password = "Redg@te1"
    def FlywayLicenseKey = "FL0"
    def CodeAnalysisReportName = "RegexAnalysisReport.html"
    
    def CODEANALYSIS='"C:\\Program Files\\Red Gate\\Code Analysis for Oracle\\cao.cmd"'
     
    stage ('Prep') {
        echo "Ensure the pipeline is configured to clean the Jenkins workspace before checkout"
        //bat('set')
        deleteDir()
        checkout scm
    }
 
    stage ('Build') {
        echo "DB Build"
        
        def status
        // Clean the CI DB to get a fresh build
        status = bat returnStatus: true, label: "Clean", script:" FLYWAY -cleanDisabled=\"false\" clean info -url=${CiDatabaseJdbc} -user=${User} -password=${Password} -schemas=${Schema} -licenseKey=${FlywayLicenseKey}"
        echo "Status of Running CI build: $status"
        if (status != 0) { error('Running CI build failed') }
         
        // Generate the dry run script for later review
        status = bat returnStatus: true, label: "DryRun", script:" FLYWAY migrate info -dryRunOutput=\"${OutputDirectory}/workspace/Build.sql\" -url=${CiDatabaseJdbc} -user=${User} -password=${Password} -schemas=${Schema} -licenseKey=${FlywayLicenseKey}"
        echo "Status of Running CI build: $status"
        if (status != 0) { error('Running CI build failed') }
        archiveArtifacts allowEmptyArchive: true, artifacts: 'Build.sql'
 
        // Migrate the CI db
        status = bat returnStatus: true, label: "Build", script:" FLYWAY migrate info -url=${CiDatabaseJdbc} -user=${User} -password=${Password} -schemas=${Schema} -licenseKey=${FlywayLicenseKey}"
        echo "Status of Running CI build: $status"
        if (status != 0) { error('Running CI build failed') }
 
        // Execute the code analysis to check for issues
        status = bat returnStatus: true, label: "Code Analysis", script:"${CODEANALYSIS} /source:migrations /outfile:CodeAnalysisResults.html /IAgreeToTheEula"
        archiveArtifacts allowEmptyArchive: true, artifacts:'CodeAnalysisResults.html'
        echo "Status of Running CI build: $status"
        if (status != 0) {
            if (status == 1) { error('Redgate Code Analysis for Oracle failed to complete due to a fatal error') }
            else if (status == 2) {
                status = 1
                echo "Redgate Code Analysis for Oracle only partially completed - often this is because one or more SQL files could not be parsed (such files are currently excluded from the generated reports)"
                }
            else if (status == 3) { error('Redgate Code Analysis for Oracle ran successfully but reported one or more errors in the analyzed SQL files') }
            else if (status == 4) {
                status = 1
                echo "Redgate Code Analysis for Oracle ran successfully but reported one or more warnings in the analyzed SQL files"
                }
            else {  error('Code Analysis failed')  }
        } 
    }
  
    stage ('Unit Tests') {
        echo "Running utPLSQL database Unit Tests"
        /*
        // status = bat returnStatus: true, label: "Unit Tests", script: "exec ut.Run();"
        echo "Status of utPLSQL database Unit Tests: $status"
        if (status != 0) { error('ERROR: Running Unit Tests failed') }
     
        status = junit allowEmptyResults: true, testResults: 'testResults.xml'
        echo "Failed JUnit tests: $status.failCount"
        archiveArtifacts allowEmptyArchive: true, artifacts: 'testResults.xml'
 
        zip zipFile: 'codeCoverage.zip', archive: true, glob: 'codeCoverage.html, codeCoverage.html_assets/*'
        archiveArtifacts allowEmptyArchive: true, artifacts: 'codeCoverage.zip', fingerprint: true
        */
    }
 
    stage ('Deploy to Acceptance') {
        echo "Deploying project to Acceptance Database"
             
        // "Flyway check for drift and changes", script: "FLYWAY -url=${env.flywayUrlBuild} -user=${env.flywayUser} -password=${env.flywayPassword} check -changes -drift -dryrun -X -check.buildEnvironment=build -reportFilename=\"${env.flywayReportPath}\""

        status = bat returnStatus: true, label: "Acceptance DryRun", script:" FLYWAY migrate -dryRunOutput=\"${OutputDirectory}/workspace/Acceptance.sql\" -url=${AcceptanceDatabaseJdbc} -user=${User} -password=${Password} -schemas=${Schema} -licenseKey=${FlywayLicenseKey}"
        echo "Generating the dryrun script for Acceptance: $status"
        if (status != 0) { error('Generating Dryrun script for Acceptance failed') }
         
        status = bat returnStatus: true, label: "Acceptance Static Code Analysis", script:" FLYWAY check -code -url=${AcceptanceDatabaseJdbc} -\"check.reportFilename=${CodeAnalysisReportName}\" -user=${User} -password=${Password} -schemas=${Schema} -licenseKey=${FlywayLicenseKey}"
        echo "deploying to Acceptance: $status"
        archiveArtifacts allowEmptyArchive: true, artifacts: "RegexAnalysisReport.html"
        if (status != 0) { error('Code Analysis Failed') }
        
        status = bat returnStatus: true, label: "Acceptance Deployment", script:" FLYWAY migrate info -url=${AcceptanceDatabaseJdbc} -user=${User} -password=${Password} -schemas=${Schema} -licenseKey=${FlywayLicenseKey}"
        echo "deploying to Acceptance: $status"
        if (status != 0) { error('Deployment to Acceptance failed') }
         
        archiveArtifacts allowEmptyArchive: true, artifacts: 'Acceptance.sql'
        archiveArtifacts allowEmptyArchive: true, artifacts: '**/Acceptance_schema_changes_images/**'
          
    }
     
    stage ('Approval Gate'){
        def message = "Approve release to Production?"
        // wrapping in a time out so it does not block the agent and simply fails the build if there is no user intervention.
        timeout(time: 30, unit: 'MINUTES') {
            def userInput = input(
                id: 'userInput',
                message: "$message",
                parameters: [
                  [$class: 'TextParameterDefinition', defaultValue: 'I Approve The Deployment', description: 'To Proceed, type I Approve The Deployment', name: 'Review deployment artifacts before proceeding']
                ]
            )
            if (userInput.indexOf('I Approve The Deployment') == -1) {
                currentBuild.result = 'ABORTED'
                error('Deployment aborted')
            }
        }
    }
     
    stage ('Deploy to Production') {
        echo "Deploying to Production Database"
         
        // status = bat returnStatus: true, label: "// "Flyway check for drift and changes", script: "FLYWAY -url=${env.flywayURL} -user=${env.flywayUser} -password=${env.flywayPassword} check -changes -drift -dryrun -X -check.buildEnvironment=build -reportFilename=\"${env.flywayReportPath}\""
        // archiveArtifacts allowEmptyArchive: true, artifacts: '${env.flywayReportPath}\Report.html'
 
        // Create the dry run script
        status = bat returnStatus: true, label: "Production DryRun", script:" FLYWAY migrate -dryRunOutput=\"${OutputDirectory}/workspace/Production.sql\" -url=${ProductionDatabaseJdbc} -user=${User} -password=${Password} -schemas=${Schema} -licenseKey=${FlywayLicenseKey}"
        echo "Generating the dryrun script for Production: $status"
        if (status != 0) { error('Generating Dryrun script for Production failed') }
        archiveArtifacts allowEmptyArchive: true, artifacts: 'Production.sql'
         
        // Deploy to Production      
        status = bat returnStatus: true, label: "Production Deployment", script:" FLYWAY migrate info -url=${ProductionDatabaseJdbc} -user=${User} -password=${Password} -schemas=${Schema} -licenseKey=${FlywayLicenseKey}"
        echo "deploying to Production: $status"
        if (status != 0) { error('Deployment to Production failed') }
         
    }
}
