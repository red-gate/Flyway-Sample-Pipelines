name: Flyway GitHub Actions QA Workflow 
on:
  push:
    branches:
      - QA
    paths:
    - 'migrations/**'

env:
  EMAIL: ${{ vars.USER_EMAIL }} 
  DB_SERVER: ${{ vars.DB_SERVER }}
  DB_QA: ${{ vars.DB_NAME_QA }}
  ENCRYPT: ${{ vars.ENCRYPT_BOOL }}
  TRUST_CERT: ${{ vars.TRUST_CERT_BOOL }}
  TOKEN: ${{ secrets.FLYWAY_TOKEN }} 
  DB_USER_QA: ${{ secrets.DB_USER_NAME_QA }}
  DB_USER_PW_QA: ${{ secrets.DB_USER_PW_QA }}
  # BASELINE_VERSION: ${{ vars.BASELINE_VERSION }}
  # FIRST_UNDO_SCRIPT: ${{ secrets.FIRST_UNDO_SCRIPT }} 


jobs:
  flyway-deploy-qa: 
    runs-on: self-hosted # Runner to execute the job
    # runs-on: ubuntu-latest
    defaults:
      run:
        shell: cmd # Default shell. Use Windows Command Prompt

    steps: # Steps are the individual tasks that are executed in the job
      - uses: actions/checkout@v4 # Check out the repository
        with: # Additional options for the action
          ref: "QA" # Branch to check out

      - name: Deploy to QA # Step to run Flyway migrations
        # To use username and password instead of windows integrated security Ensure that SQL Server is configured to allow SQL Server authentication. You can check this in SQL Server Management Studio (SSMS) under the server properties -> Security -> Server authentication. Ensure "SQL Server and Windows Authentication mode" is selected.
        run: flyway -email=${{ env.EMAIL }} -token=${{ env.TOKEN }} info migrate info -user=${{ env.DB_USER_QA }} -password=${{ env.DB_USER_PW_QA }} -url="${{ env.DB_SERVER }};databaseName=${{ env.DB_QA }};encrypt=${{ env.ENCRYPT }};trustServerCertificate=${{ env.TRUST_CERT }}" -IAgreeToTheEula -locations="filesystem:${{ github.workspace }}/migrations" -configFiles="${{ github.workspace }}/flyway.toml" -baselineOnMigrate=true -errorOverrides=S0001:0:I-
        working-directory: ./migrations
        